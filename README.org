[![Available on Hackage][badge-hackage]][hackage]
[![License BSD3][badge-license]][license]
[![Build Status][badge-travis]][travis]

[badge-travis]: https://travis-ci.org/robstewart57/hsparql.png?branch=master
[travis]: https://travis-ci.org/robstewart57/hsparql
[badge-hackage]: https://img.shields.io/hackage/v/hsparql.svg
[hackage]: http://hackage.haskell.org/package/hsparql
[badge-license]: https://img.shields.io/badge/license-BSD3-green.svg?dummy
[license]: https://github.com/robstewart57/hsparql/blob/master/LICENSE

* Introduction

hsparql includes a DSL to easily create queries, as well as methods to
submit those queries to a SPARQL server, returning the results as
simple Haskell data structures.

** Select Queries

Take the following SPARQL query:

#+NAME: <sparql1>
     #+BEGIN_SRC <>
PREFIX dbpedia: <http://dbpedia.org/resource/>
PREFIX dbprop: <http://dbpedia.org/property/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
SELECT ?name ?page
WHERE {
?x dbprop:genre dbpedia:Web_browser
?x foaf:name ?name
?x foaf:page ?page
}
     #+END_SRC


Can be generated using the following Haskell code:

#+NAME: <sparql1>
     #+BEGIN_SRC <>
simpleSelect :: Query SelectQuery
simpleSelect = do
    resource <- prefix "dbpedia" (iriRef "http://dbpedia.org/resource/")
    dbpprop  <- prefix "dbprop" (iriRef "http://dbpedia.org/property/")
    foaf     <- prefix "foaf" (iriRef "http://xmlns.com/foaf/0.1/")

    x    <- var
    name <- var
    page <- var

    triple x (dbpprop .:. "genre") (resource .:. "Web_browser")

    triple x (foaf .:. "name") name
    triple x (foaf .:. "page") page

    return SelectQuery { queryVars = [name, page] }
     #+END_SRC

** Construct Queries

Take the following SPARQL query:

#+NAME: <sparql1>
     #+BEGIN_SRC <>
PREFIX dbpedia: <http://dbpedia.org/resource/>
PREFIX dbprop: <http://dbpedia.org/property/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX example: <http://www.example.com/>
CONSTRUCT {
?x example:hasName ?name
}
WHERE {
?x dbprop:genre resource:Web_browser
?x foaf:name ?name
?x foaf:page ?page
}
     #+END_SRC

Can be generated using the following Haskell code:

#+NAME: <haskell1>
     #+BEGIN_SRC <haskell>
simpleConstruct :: Query ConstructQuery
simpleConstruct = do
    resource <- prefix "dbpedia" (iriRef "http://dbpedia.org/resource/")
    dbpprop  <- prefix "dbprop" (iriRef "http://dbpedia.org/property/")
    foaf     <- prefix "foaf" (iriRef "http://xmlns.com/foaf/0.1/")
    example  <- prefix "example" (iriRef "http://www.example.com/")

    x    <- var
    name <- var
    page <- var

    construct <- constructTriple x (example .:. "hasName") name

    triple x (dbpprop .:. "genre") (resource .:. "Web_browser")
    triple x (foaf .:. "name") name
    triple x (foaf .:. "page") page

    return ConstructQuery { queryConstructs = [construct] }
     #+END_SRC

** Describe Queries

Take the following SPARQL query:

#+NAME: <sparql1>
     #+BEGIN_SRC <>
DESCRIBE <http://dbpedia.org/resource/Edinburgh>
     #+END_SRC

Can be generated using the following Haskell code:

#+NAME: <haskell1>
     #+BEGIN_SRC <haskell>
simpleDescribe :: Query DescribeQuery
simpleDescribe = do
    resource <- prefix "dbpedia" (iriRef "http://dbpedia.org/resource/")
    uri <- describeIRI (resource .:. "Edinburgh")
    return DescribeQuery { queryDescribe = uri }
     #+END_SRC

** Ask Queries

Take the following SPARQL query:

#+NAME: <sparql1>
     #+BEGIN_SRC <>
PREFIX dbprop: <http://dbpedia.org/property/>
ASK { ?x dbprop:genre <http://dbpedia.org/resource/Web_browser> }
     #+END_SRC

Can be generated using the following Haskell code:

#+NAME: <haskell1>
     #+BEGIN_SRC <haskell>
simpleAsk :: Query AskQuery
simpleAsk = do
    resource <- prefix "dbpedia" (iriRef "http://dbpedia.org/resource/")
    dbprop  <- prefix "dbprop" (iriRef "http://dbpedia.org/property/")

    x <- var
    ask <- askTriple x (dbprop .:. "genre") (resource .:. "Web_browser")

    return AskQuery { queryAsk = [ask] }
     #+END_SRC

** Output Types

*** Select Queries

SELECT queries generate a set of sparql query solutions. See:
http://www.w3.org/TR/rdf-sparql-XMLres/


#+NAME: <>
     #+BEGIN_SRC <haskell>
selectExample :: IO ()
selectExample = do
  (Just s) <- selectQuery "http://dbpedia.org/sparql" simpleSelect
  putStrLn . take 500 . show $ s
     #+END_SRC

Here's the respective type:
#+NAME: <>
     #+BEGIN_SRC <haskell>
selectQuery :: EndPoint -> Query SelectQuery -> IO (Maybe [[BindingValue]])
     #+END_SRC


*** Construct Queries

CONSTRUCT queries generate RDF, which is serialized in N3 in this
package. See:
http://www.w3.org/TR/rdf-primer/#rdfxml

#+NAME: <sparql1>
     #+BEGIN_SRC <haskell>
constructExample :: IO ()
constructExample = do
  rdfGraph <- constructQuery "http://dbpedia.org/sparql" simpleConstruct
  mapM_ print (triplesOf rdfGraph)
     #+END_SRC

Here's the respective type:
#+NAME: <sparql1>
     #+BEGIN_SRC <haskell>
constructQuery :: EndPoint -> Query ConstructQuery -> IO MGraph
     #+END_SRC

*** Describe Queries

DESCRIBE queries generate RDF, which is serialized in N3 in this
package. See:
http://www.w3.org/TR/rdf-sparql-query/#describe

#+NAME: <sparql1>
     #+BEGIN_SRC <haskell>
describeExample :: IO ()
describeExample = do
  rdfGraph <- describeQuery "http://dbpedia.org/sparql" simpleDescribe
  mapM_ print (triplesOf rdfGraph
     #+END_SRC

Here's the respective type:
#+NAME: <sparql1>
     #+BEGIN_SRC <haskell>
describeQuery :: EndPoint -> Query DescribeQuery -> IO MGraph
     #+END_SRC

*** Ask Queries

ASK queries inspects whether or not a triple exists. RDF is an
open-world assumption. See:
http://www.w3.org/TR/rdf-sparql-query/#ask

#+NAME: <sparql1>
     #+BEGIN_SRC <haskell>
askExample :: IO ()
askExample = do
  res <- askQuery "http://dbpedia.org/sparql" simpleAsk
  putStrLn $ "result: " ++ (show (res::Bool))
     #+END_SRC

Here's the respective type:
#+NAME: <sparql1>
     #+BEGIN_SRC <haskell>
askQuery :: EndPoint -> Query AskQuery -> IO Bool
     #+END_SRC

** TODOs

*** Opt for a unified Type representation
This hsparql package and the RDF4H [1] package use similar, but not
identical, types for triples, namespaces, prefixes and so on. Ideally,
one type representation for such concepts should be adopted for both packages.

*** Develop a unified semantic web toolkit for Haskell
Combining the RDF4H and hsparql packages seems like a sensible goal to
achieve, to provide a semantic web toolkit similar to Jena [2] for Java.


[1] - https://github.com/amccausl/RDF4H
[2] - http://incubator.apache.org/jena/
